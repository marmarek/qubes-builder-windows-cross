# Generic makefile for Windows build
#
# For "API" documentation check Makefile.generic
#
# Variables supposed to be in component's Makefile.builder:
#  WIN_CROSS_COMPILER - "mingw" (default), "custom"
#  WIN_CROSS_BUILD_CMD - build command for "custom" WIN_COMPILER
#  WIN_SOURCE_SUBDIRS - list of directories to process
#  WIN_CROSS_PREBUILD_CMD - commands to run before build process
#  WIN_CROSS_POSTBUILD_CMD - commands to run after build process
#    (after WIN_PACKAGE_CMD)
#  WIN_CROSS_SIGN_CMD - command to sign executables
#    the default does nothing
#  WIN_CROSS_PACKAGE_CMD - command to generate .msm/msi files
#    the default script builds all .wxs files with Wix,
#    and .wxb files as Wix bundles (producing .exe)
#  WIN_PACKAGE_EXT - desired extension of the installer output
#    "msi" (final installer package) or "msm" (merge module, default)
#  WIN_OUTPUT_BIN - directory with output binaries (*.exe, other files)
#  WIN_OUTPUT_LIBS - directory with output libraries (both *.lib and *.dll),
#    relative to $(PACKAGE)
#  WIN_OUTPUT_HEADERS - directory with includes for $(WIN_OUTPUT_LIBS),
#    relative to $(PACKAGE)
#  WIN_BUILD_DEPS - components needed to compile/link this one, headers will be
#    available in $(QUBES_INCLUDE), libraries in $(QUBES_LIB)
#
#  For dummy *_CMD use "true"
#

WINDOWS_SCRIPTS := $(WINDOWS_PLUGIN_DIR)/scripts

### Variables required Makefile.generic
# Use directory list as PACKAGE_LIST
PACKAGE_LIST = $(WIN_SOURCE_SUBDIRS)
DIST_BUILD_DIR = /home/user

### Settings: defaults, to be overriden by Makefile.builder

WIN_CROSS_COMPILER ?= mingw
WIN_CROSS_SIGN_CMD ?= true
WIN_CROSS_PACKAGE_CMD ?= ~/wix.sh $(WIN_PACKAGE_EXT)
WIN_CROSS_PREBUILD_CMD ?= true
WIN_CROSS_POSTBUILD_CMD ?= true
WIN_PACKAGE_EXT ?= msm

### Settings: defaults, to be overriden by builder.conf

WIN_BUILD_TYPE ?= fre
BASE_DIST ?= fc30

### Local variables

# Build environment

RUN_AS_USER := user

ifneq (,$(findstring x64,$(DIST)))
DDK_ARCH = x64
MINGW_ARCH = x86_64
DIST_TMP = $(subst x64,,$(DIST))
else ifneq (,$(findstring x86,$(DIST)))
DDK_ARCH = x86
MINGW_ARCH = i686
DIST_TMP = $(subst x86,,$(DIST))
else
$(error unsupported architecture: $(DIST))
endif

CHROOT_ENV += CC=$(MINGW_ARCH)-w64-mingw32-gcc
CHROOT_ENV += CXX=$(MINGW_ARCH)-w64-mingw32-g++
CHROOT_ENV += WINDRES=$(MINGW_ARCH)-w64-mingw32-windres
CHROOT_ENV += DLLTOOL=$(MINGW_ARCH)-w64-mingw32-dlltool
CHROOT_ENV += STRIP=$(MINGW_ARCH)-w64-mingw32-strip
CHROOT_ENV += DDK_PATH=/usr/$(MINGW_ARCH)-w64-mingw32/sys-root/mingw/include/ddk
CHROOT_ENV += DDK_ARCH=$(DDK_ARCH)
CHROOT_ENV += ARCH=$(DDK_ARCH)

DIST_TMP := $(subst -cross,,$(DIST_TMP))

ifeq ($(DIST_TMP),win7)
DDK_DIST = WIN7
else ifeq ($(DIST_TMP),winVista)
DDK_DIST = WLH
else ifeq ($(DIST_TMP),win2k)
DDK_DIST = W2K
$(error Windows 2000 not supported)
else ifeq ($(DIST_TMP),winXP)
DDK_DIST = WXP
else
$(error $(DIST_TMP) not supported)
endif

CHROOT_ENV += DDK_DIST=$(DDK_DIST)

# Misc variables

# Misc variables

QUBES_INCLUDE = $(DIST_BUILD_DIR)/build-deps/include
QUBES_LIB = $(DIST_BUILD_DIR)/build-deps/lib
QUBES_BIN = $(DIST_BUILD_DIR)/build-deps/bin

CFLAGS = "-I$(QUBES_INCLUDE)"
CFLAGS.chk = -DDEBUG -DDBG -D_DEBUG
CFLAGS.fre =
CFLAGS += $(CFLAGS.$(WIN_BUILD_TYPE))

CHROOT_ENV += CFLAGS="$(CFLAGS)"
CHROOT_ENV += LDFLAGS="-L$(QUBES_LIB)"
CHROOT_ENV += DIST_SRC="$(DIST_SRC)"
CHROOT_ENV += QUBES_INCLUDE="$(QUBES_INCLUDE)"
CHROOT_ENV += QUBES_LIB="$(QUBES_LIB)"
CHROOT_ENV += QUBES_BIN="$(QUBES_BIN)"

# output directory, for signing script
CHROOT_ENV += WIN_OUTPUT_BIN="$(WIN_OUTPUT_BIN)"

RPM_PLUGIN_DIR := $(WINDOWS_PLUGIN_DIR)/../builder-rpm

### Targets required by Makefile.generic to build packages

BUILD_PKG_LIST := $(WINDOWS_PLUGIN_DIR)/build-deps/build-deps-$(DIST:%-cross=%).list

$(CHROOT_DIR)/home/user/.prepared_base: $(RPM_PLUGIN_DIR)/prepare-chroot-builder $(BUILD_PKG_LIST)
	@echo "-> Preparing $(DIST) build environment"
	@sudo -E $(RPM_PLUGIN_DIR)/prepare-chroot-builder $(CHROOT_DIR) $(BASE_DIST) $(BUILD_PKG_LIST) || exit 1
	@touch $(CHROOT_DIR)/home/user/.prepared_base

$(CHROOT_DIR)/home/user/.prepared_wix: $(CACHEDIR)/wix311-binaries.zip
	@echo "-> Installing WIX Toolset"
	sudo mkdir -p $(CHROOT_DIR)/opt/wix
	sudo chown $(USER) $(CHROOT_DIR)/opt/wix
	unzip -o -d "$(CHROOT_DIR)/opt/wix" $<
	touch $(CHROOT_DIR)/home/user/.prepared_wix

$(CACHEDIR)/wix311-binaries.zip: $(WINDOWS_PLUGIN_DIR)/build-deps/wix311-binaries.zip.sha512sum
	wget https://github.com/wixtoolset/wix3/releases/download/wix3111rtm/wix311-binaries.zip -O "$@.UNTRUSTED"
	sha512sum -c $< <"$@.UNTRUSTED"
	mv "$@.UNTRUSTED" "$@"
	touch "$@"

dist-prepare-chroot: $(CHROOT_DIR)/home/user/.prepared_base $(CHROOT_DIR)/home/user/.prepared_wix $(WINDOWS_PLUGIN_DIR)/scripts/wix.sh
	cp $(WINDOWS_PLUGIN_DIR)/scripts/wix.sh $(CHROOT_DIR)/$(DIST_BUILD_DIR)/

dist-prep:
	@true

dist-build-dep:
	@rm -rf $(CHROOT_DIR)$(QUBES_INCLUDE)
	@rm -rf $(CHROOT_DIR)$(QUBES_LIB)
	@rm -rf $(CHROOT_DIR)$(QUBES_BIN)
	@mkdir -p $(CHROOT_DIR)$(QUBES_INCLUDE)
	@mkdir -p $(CHROOT_DIR)$(QUBES_LIB)
	@mkdir -p $(CHROOT_DIR)$(QUBES_BIN)
	@for dep in $(WIN_BUILD_DEPS); do \
		if [ "$$(cat $(BUILDER_REPO_DIR)/$$dep/version 2>/dev/null)" != "$$(cat $(SRC_DIR)/$$dep/version)" ]; then \
			echo "*** Required $$dep not buit or outdated" >&3; \
			exit 1; \
		fi; \
		if [ -d $(BUILDER_REPO_DIR)/$$dep/bin ]; then \
			cp -r -t $(CHROOT_DIR)$(QUBES_BIN) $(BUILDER_REPO_DIR)/$$dep/bin/*; \
		fi; \
		if [ -d $(BUILDER_REPO_DIR)/$$dep/lib ]; then \
			cp -t $(CHROOT_DIR)$(QUBES_LIB) $(BUILDER_REPO_DIR)/$$dep/lib/*; \
		fi; \
		if [ -d $(BUILDER_REPO_DIR)/$$dep/include ]; then \
			cp -t $(CHROOT_DIR)$(QUBES_INCLUDE) $(BUILDER_REPO_DIR)/$$dep/include/*; \
		fi; \
	done

dist-package:
ifndef PACKAGE
	$(error "PACKAGE need to be set!")
endif
	@rm -f $(CHROOT_DIR)/$(DIST_SRC)/$(PACKAGE)/*.msi

	sudo chroot $(CHROOT_DIR) su -c 'cd $(DIST_SRC)/$(PACKAGE); env $(CHROOT_ENV) $(WIN_CROSS_PREBUILD_CMD)' - $(RUN_AS_USER)
ifeq ($(WIN_CROSS_COMPILER),mingw)
	sudo chroot $(CHROOT_DIR) su -c 'cd $(DIST_SRC)/$(PACKAGE); env $(CHROOT_ENV) make all' - $(RUN_AS_USER)
else ifeq ($(WIN_CROSS_COMPILER),custom)
	sudo chroot $(CHROOT_DIR) su -c 'cd $(DIST_SRC)/$(PACKAGE); env $(CHROOT_ENV) $(WIN_CROSS_BUILD_CMD)' - $(RUN_AS_USER)
endif
	sudo chroot $(CHROOT_DIR) su -c 'cd $(DIST_SRC)/$(PACKAGE); env $(CHROOT_ENV) $(WIN_CROSS_PACKAGE_CMD)' - $(RUN_AS_USER)
	sudo chroot $(CHROOT_DIR) su -c 'cd $(DIST_SRC)/$(PACKAGE); env $(CHROOT_ENV) $(WIN_CROSS_POSTBUILD_CMD)' - $(RUN_AS_USER)
	sudo chroot $(CHROOT_DIR) su -c 'cd $(DIST_SRC)/$(PACKAGE); env $(CHROOT_ENV) $(WIN_CROSS_SIGN_CMD)' - $(RUN_AS_USER)

dist-copy-out:
	@echo "--> Done:" >&3
	@rm -rf "$(BUILDER_REPO_DIR)/$(COMPONENT)"
ifneq ($(WIN_CROSS_PACKAGE_CMD),true)
	@shopt -s nullglob;\
	for pkg in $(CHROOT_DIR)/$(DIST_SRC)/$(PACKAGE)/*.ms[im] $(CHROOT_DIR)/$(DIST_SRC)/$(PACKAGE)/*.exe; do\
		echo "      `basename $$pkg`" >&3 ;\
		mv -t $(ORIG_SRC)/$(PACKAGE) $$pkg;\
	done
endif
ifneq (,$(WIN_OUTPUT_BIN))
	@mkdir -p $(BUILDER_REPO_DIR)/$(COMPONENT)/bin
	@for file in $(CHROOT_DIR)/$(DIST_SRC)/$(PACKAGE)/$(WIN_OUTPUT_BIN)/*/*; do\
		echo "      bin/`basename $$file`" >&3 ;\
		cp -r -t $(BUILDER_REPO_DIR)/$(COMPONENT)/bin/ $$file || exit 1;\
	done
endif
ifneq (,$(WIN_OUTPUT_LIBS))
	@mkdir -p $(BUILDER_REPO_DIR)/$(COMPONENT)/lib
	@for file in $(CHROOT_DIR)/$(DIST_SRC)/$(PACKAGE)/$(WIN_OUTPUT_LIBS)/*/*; do\
		echo "      lib/`basename $$file`" >&3 ;\
		cp -r -t $(BUILDER_REPO_DIR)/$(COMPONENT)/lib/ $$file || exit 1;\
	done
endif
ifneq (,$(WIN_OUTPUT_HEADERS))
	@mkdir -p $(BUILDER_REPO_DIR)/$(COMPONENT)/include
	@for file in $(CHROOT_DIR)/$(DIST_SRC)/$(PACKAGE)/$(WIN_OUTPUT_HEADERS)/*.h; do\
		echo "      include/`basename $$file`" >&3 ;\
		cp -t $(BUILDER_REPO_DIR)/$(COMPONENT)/include/ $$file || exit 1;\
	done
endif
	cp $(CHROOT_DIR)/$(DIST_SRC)/version $(BUILDER_REPO_DIR)/$(COMPONENT)/version

### Additional targets
